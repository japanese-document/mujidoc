// Code generated by MockGen. DO NOT EDIT.
// Source: internal/utils/glob.go
//
// Generated by this command:
//
//	mockgen -source=internal/utils/glob.go -destination=internal/utils/mock_utils/glob_mock.go
//

// Package mock_utils is a generated GoMock package.
package mock_utils

import (
	fs "io/fs"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockIFilePath is a mock of IFilePath interface.
type MockIFilePath struct {
	ctrl     *gomock.Controller
	recorder *MockIFilePathMockRecorder
}

// MockIFilePathMockRecorder is the mock recorder for MockIFilePath.
type MockIFilePathMockRecorder struct {
	mock *MockIFilePath
}

// NewMockIFilePath creates a new mock instance.
func NewMockIFilePath(ctrl *gomock.Controller) *MockIFilePath {
	mock := &MockIFilePath{ctrl: ctrl}
	mock.recorder = &MockIFilePathMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIFilePath) EXPECT() *MockIFilePathMockRecorder {
	return m.recorder
}

// WalkDir mocks base method.
func (m *MockIFilePath) WalkDir(root string, fn fs.WalkDirFunc) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WalkDir", root, fn)
	ret0, _ := ret[0].(error)
	return ret0
}

// WalkDir indicates an expected call of WalkDir.
func (mr *MockIFilePathMockRecorder) WalkDir(root, fn any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WalkDir", reflect.TypeOf((*MockIFilePath)(nil).WalkDir), root, fn)
}
